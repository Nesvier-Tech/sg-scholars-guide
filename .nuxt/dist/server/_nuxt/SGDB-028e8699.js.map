{"version":3,"file":"SGDB-028e8699.js","sources":["../../../../composables/SGDB.ts"],"sourcesContent":["import { Client, Databases, ID, Query } from 'appwrite';\r\n\r\n// TEST PROJECT\r\n// const PROJECT_ID = '6551f0f5e59cbbe16389';\r\n// const DATABASE_ID = '6551f11f78036659169c';\r\n// const COLLECTION_ID = '65678a200361fbaf0193';\r\n\r\n// Scholar's Guide\r\nconst PROJECT_ID: string = '652bbefc35c78d6b21ed';              // SG: Scholar's Guide\r\nconst DATABASE_ID: string = '65697a59b90e048cd714';             // SGDB\r\nconst MATH_COLLECTION_ID: string = '65697cc59e598b1d3d11';      // Math Collection\r\nconst SCI_COLLECTION_ID: string = '65697caf0507daf45601';       // Science Collection\r\nconst LANG_PROF_COLLECTION_ID: string = '65697ddbb37b244a5c56'; // Language Proficiency Collection\r\nconst READ_COMP_COLLECTION_ID: string = '65697e2043358985efbb'; // Reading Comprehension Collection\r\n\r\nexport function getProjectID(): string {\r\n    return PROJECT_ID;\r\n}\r\n\r\n/////// Client ///////\r\nconst client = new Client()\r\n    .setEndpoint('https://cloud.appwrite.io/v1')\r\n    .setProject(`${PROJECT_ID}`);\r\n\r\nexport function getClient(): Client {\r\n    return client;\r\n}\r\n\r\n/////// Database ///////\r\nconst databases = new Databases(client);\r\n\r\n// List of subjects to choose when querying\r\nconst SUBJECTS: { MATH: string, SCI: string, LANG_PROF: string, READ_COMP: string } = {                               // Leaky\r\n    MATH: MATH_COLLECTION_ID,\r\n    SCI: SCI_COLLECTION_ID,\r\n    LANG_PROF: LANG_PROF_COLLECTION_ID,\r\n    READ_COMP: READ_COMP_COLLECTION_ID\r\n}\r\n\r\nexport function getSubjects(): { MATH: string, SCI: string, LANG_PROF: string, READ_COMP: string } {\r\n    return SUBJECTS;\r\n}\r\n\r\n// Create Documents (Row)\r\nexport function post_questions(SUBJECT: string, questions: any) {\r\n    console.log(`SUBJECT: ${SUBJECT}`);\r\n    console.log(`Questions: ${questions}`);\r\n    for (const q of questions) {\r\n        if (q.question === '' || q.options.length === 0) return -1;\r\n\r\n        const promise = databases.createDocument(\r\n            `${DATABASE_ID}`,   // Database ID\r\n            `${SUBJECT}`,       // Collection ID\r\n            ID.unique(),\r\n            {\r\n                'questionID': q.id + 1,         // Change in the future\r\n                'question': q.question,\r\n                'correctAnswer': q.correct,\r\n                'wrongAnswers': q.options,\r\n                'authorID': q.authorID\r\n            }\r\n        ); const ret = executeQuery(promise);\r\n\r\n        if ('code' in ret) return -1; // Error\r\n    }\r\n    return 0;\r\n}\r\n\r\n\r\n// Queries function here: https://appwrite.io/docs/products/databases/queries\r\n// List Documents\r\nexport async function get_questions(SUBJECT: string) {\r\n    let promise = databases.listDocuments(\r\n        `${DATABASE_ID}`,    // Database ID\r\n        `${SUBJECT}`,  // Collection ID\r\n        [\r\n            Query.select(['questionID', 'question', 'correctAnswer', 'wrongAnswers'])\r\n        ]\r\n    );\r\n    const result = await executeQuery(promise);\r\n    //console.log(`Result: ${result}`);\r\n    return result;\r\n}\r\n\r\nexport const SGDB = () => {\r\n    return {\r\n        SUBJECTS,\r\n        post_questions,\r\n        get_questions\r\n    }\r\n}\r\n\r\nfunction executeQuery(promise: Promise<any>) {\r\n    return promise.then(function (response) {\r\n        //console.log(`Response: ${response}`);\r\n        return response;\r\n    }, function (error) {\r\n        //console.log(error);\r\n        return error;\r\n    });\r\n}\r\n\r\n// For future use\r\n// We can use getLastID() and have the question 0 to get the last id\r\n// for uploading the questions\r\n// or we can change the function to give us n number of available ids\r\nfunction getLastID(SUBJECT: string) {\r\n    return 0;\r\n    let promise = databases.listDocuments(\r\n        `${DATABASE_ID}`,    // Database ID\r\n        `${SUBJECT}`,  // Collection ID\r\n        [\r\n            Query.select(['questionID']),\r\n        ]\r\n    );\r\n}"],"names":[],"mappings":";AAQA,MAAM,aAAqB;AAC3B,MAAM,cAAsB;AAC5B,MAAM,qBAA6B;AACnC,MAAM,oBAA4B;AAClC,MAAM,0BAAkC;AACxC,MAAM,0BAAkC;AAOxC,MAAM,SAAS,IAAI,OACd,EAAA,YAAY,8BAA8B,EAC1C,WAAW,GAAG,UAAU,EAAE;AAExB,SAAS,YAAoB;AACzB,SAAA;AACX;AAGA,MAAM,YAAY,IAAI,UAAU,MAAM;AAGtC,MAAM,WAAgF;AAAA;AAAA,EAClF,MAAM;AAAA,EACN,KAAK;AAAA,EACL,WAAW;AAAA,EACX,WAAW;AACf;AAEO,SAAS,cAAmF;AACxF,SAAA;AACX;AAGgB,SAAA,eAAe,SAAiB,WAAgB;AACpD,UAAA,IAAI,YAAY,OAAO,EAAE;AACzB,UAAA,IAAI,cAAc,SAAS,EAAE;AACrC,aAAW,KAAK,WAAW;AACvB,QAAI,EAAE,aAAa,MAAM,EAAE,QAAQ,WAAW;AAAU,aAAA;AAExD,UAAM,UAAU,UAAU;AAAA,MACtB,GAAG,WAAW;AAAA;AAAA,MACd,GAAG,OAAO;AAAA;AAAA,MACV,GAAG,OAAO;AAAA,MACV;AAAA,QACI,cAAc,EAAE,KAAK;AAAA;AAAA,QACrB,YAAY,EAAE;AAAA,QACd,iBAAiB,EAAE;AAAA,QACnB,gBAAgB,EAAE;AAAA,QAClB,YAAY,EAAE;AAAA,MAClB;AAAA,IAAA;AACK,UAAA,MAAM,aAAa,OAAO;AAEnC,QAAI,UAAU;AAAY,aAAA;AAAA,EAC9B;AACO,SAAA;AACX;AAKA,eAAsB,cAAc,SAAiB;AACjD,MAAI,UAAU,UAAU;AAAA,IACpB,GAAG,WAAW;AAAA;AAAA,IACd,GAAG,OAAO;AAAA;AAAA,IACV;AAAA,MACI,MAAM,OAAO,CAAC,cAAc,YAAY,iBAAiB,cAAc,CAAC;AAAA,IAC5E;AAAA,EAAA;AAEE,QAAA,SAAS,MAAM,aAAa,OAAO;AAElC,SAAA;AACX;AAEO,MAAM,OAAO,MAAM;AACf,SAAA;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAER;AAEA,SAAS,aAAa,SAAuB;AAClC,SAAA,QAAQ,KAAK,SAAU,UAAU;AAE7B,WAAA;AAAA,EACX,GAAG,SAAU,OAAO;AAET,WAAA;AAAA,EAAA,CACV;AACL;"}